@page "/tools/audit"
@inject IJSRuntime jsRuntime
@using System.Xml

<PageTitle>MTConnect&reg; Agent Audit - MtconnectCore by True Analytics Manufacturing Solutions</PageTitle>

<h3>Mtconnect&reg; Agent Audit</h3>

<p>True Analytics Manufacturing Solutions has created a console application that can be downloaded and executed locally that leverages the <code>MtconnectAgentService.Audit</code> method in the <code>MtconnectCore</code> library. Visit the <a href="https://github.com/TrueAnalyticsSolutions/MtconnectAgentAudit" target="_blank">MtconnectAgentAudit</a> project site for more information.</p>

<p>Go to the <a href="https://github.com/TrueAnalyticsSolutions/MtconnectAgentAudit/releases" target="_blank">Releases</a> page on the <strong>MtconnectAgentAudit</strong> project site to download the executable.</p>

<hr/>

<h3>In-Browser Audit Tool</h3>
<p><strong>Note</strong> that the Agent must accept Cross-Origin Requests and should be served with HTTPS.</p>
<div>
    <label for="agent-url" class="form-label">MTConnect<sup>&reg;</sup> Agent URL</label>
    <div class="input-group mb-3">
      <span class="input-group-text" id="agent-addon">https://agent.mtconnect.org/</span>
      <input @oninput="UpdateAgentUrl" type="text" class="form-control" id="agent-url" aria-describedby="agent-addon">
      <button class="btn btn-outline-primary" disabled="@(AgentUrl == null)" type="button" @onclick="AuditAgent">Audit</button>
    </div>
</div>
@if (!responseFailed)
{
<h4>Probe Request</h4>
<ResponseDocumentValidationResults Document="ProbeDocument"></ResponseDocumentValidationResults>
<h4>Current Request</h4>
<ResponseDocumentValidationResults Document="CurrentDocument"></ResponseDocumentValidationResults>
<h4>Sample Request</h4>
    <ResponseDocumentValidationResults Document="SampleDocument"></ResponseDocumentValidationResults>
} else
{
    <p class="alert alert-danger">Could not fetch from provided Agent.</p>
}

@code {
    bool responseFailed = false;
    private Uri AgentUrl { get; set; }

    private XmlDocument ProbeDocument { get; set; }
    private XmlDocument CurrentDocument { get; set; }
    private XmlDocument SampleDocument { get; set; }

    private async Task UpdateAgentUrl(ChangeEventArgs e)
    {
        if (Uri.TryCreate(e.Value?.ToString(), UriKind.RelativeOrAbsolute, out Uri uri))
        {
            AgentUrl = uri;
        } else
        {
            AgentUrl = null;
        }
    }

    private async Task AuditAgent(MouseEventArgs e)
    {
        responseFailed = false;
        if (AgentUrl == null)
        {
            return;
        }
        ProbeDocument = null;
        CurrentDocument = null;
        SampleDocument = null;

        ProbeDocument = await jsRuntime.InvokeAsync<XmlDocument>("fetchMtconnect", new Uri(AgentUrl, "probe"));
        CurrentDocument = await jsRuntime.InvokeAsync<XmlDocument>("fetchMtconnect", new Uri(AgentUrl, "current"));
        SampleDocument = await jsRuntime.InvokeAsync<XmlDocument>("fetchMtconnect", new Uri(AgentUrl, "sample"));

        if (ProbeDocument == null && CurrentDocument == null && SampleDocument == null)
        {
            responseFailed = true;
        }
        StateHasChanged();
    }
}