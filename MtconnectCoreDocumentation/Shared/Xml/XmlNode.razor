@inject IJSRuntime jsRuntime
@using System.Xml

<li class="@($"xml-node {(Collapsed ? "collapsed" : "")} {(ChildElements.Any() ? "has-children" : "")} {(IsSelected ? "selected" : "")}")" @onclick="OnClick" @onclick:stopPropagation="true">
    <span class="xml-node-open-start">&lt;</span><span class="xml-node-name">@(Node.Name)</span>
    @if (Node.Attributes.Count > 0)
    {
    foreach (XmlAttribute attribute in Node.Attributes)
    {
        <span class="xml-node-margin">&nbsp;</span>
        <span class="xml-node-attribute-name">@(attribute.Name)</span><span class="xml-node-attribute-symbol">=</span><span class="xml-node-attribute-quote">"</span><span class="xml-node-attribute-value">@(attribute.Value)</span><span class="xml-node-attribute-quote">"</span>
        <span class="xml-node-attribute-margin">&nbsp;</span>
    }
    }
    @if (ChildElements.Any())
    {
        <span class="xml-node-open-end">&gt;</span>
        <ul class="xml-node-list">
        @foreach (XmlElement child in ChildElements)
        {
            <XmlNode Node="child"></XmlNode>   
        }
        </ul>
    } else if (!string.IsNullOrEmpty(Node.InnerText))
    {
        <span class="xml-node-open-end">&gt;</span>
        <span class="xml-node-value">@(Node.InnerText)</span>
        <span class="xml-node-close-start">&lt;</span><span class="xml-node-close-symbol">/</span><span class="xml-node-name">@(Node.Name)</span><span class="xml-node-close-end">&gt;</span>
    } else
    {
        <span class="xml-node-close-symbol">/</span><span class="xml-node-close-end">&gt;</span>
    }
</li>
@if (ChildElements.Any())
{
    <li class="xml-node">
        <span class="xml-node-close-start">&lt;</span><span class="xml-node-close-symbol">/</span><span class="xml-node-name">@(Node.Name)</span><span class="xml-node-close-end">&gt;</span>
    </li>
}

@code {
    [Parameter]
    public XmlElement Node { get; set; }

    [CascadingParameter]
    public XmlElement? selectedElement { get; set; }

    public IEnumerable<XmlElement> ChildElements { get; set; }

    private bool Collapsed { get; set; } = false;

    private bool IsSelected { get; set; } = false;

    protected async override Task OnInitializedAsync()
    {
        ChildElements = Node.ChildNodes.OfType<XmlElement>();
    }

    protected async override Task OnParametersSetAsync()
    {
        if (selectedElement == Node)
        {
            IsSelected = true;
            StateHasChanged();
        } else if (IsSelected)
        {
            IsSelected = false;
            StateHasChanged();
        }
    }

    private async void OnClick(MouseEventArgs e)
    {
        Collapsed = !Collapsed;
        StateHasChanged();
    }
}
